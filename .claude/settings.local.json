{
  "permissions": {
    "allow": [
      "Bash(git rm:*)",
      "WebSearch",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git tag:*)",
      "Bash(git init:*)",
      "Bash(ls:*)",
      "Bash(dir:*)",
      "Bash(dotnet nuget push:*)",
      "Bash(git log:*)",
      "WebFetch(domain:github.com)",
      "Bash(git branch:*)",
      "Bash(git filter-branch:*)",
      "Bash(for dir in \"Marventa.Framework.Core\" \"Marventa.Framework.Domain\" \"Marventa.Framework.Application\" \"Marventa.Framework.Infrastructure\" \"Marventa.Framework.Web\" \"Marventa.Framework\")",
      "Bash(do echo \"=== $dir ===\")",
      "Bash(done)",
      "Bash(tree:*)",
      "Bash(for file in Marventa.Framework.Domain/Entities/*.cs)",
      "Bash(do mv \"$file\" Marventa.Framework.Infrastructure/Entities/)",
      "Bash(for file in Marventa.Framework.Infrastructure/Entities/*.cs)",
      "Bash(do sed -i 's/namespace Marventa.Framework.Domain.Entities/namespace Marventa.Framework.Infrastructure.Entities/g' \"$file\")",
      "Bash(for:*)",
      "Bash(do sed -i 's/using Marventa.Framework.Domain.Entities/using Marventa.Framework.Infrastructure.Entities/g' \"$file\")",
      "Bash(del:*)",
      "Bash(do mv \"$file\" Marventa.Framework.Domain/Entities/)",
      "Bash(do sed -i 's/namespace Marventa.Framework.Infrastructure.Entities/namespace Marventa.Framework.Domain.Entities/g' \"$file\")",
      "Bash(do sed -i 's/using Marventa.Framework.Infrastructure.Entities/using Marventa.Framework.Domain.Entities/g' \"$file\")",
      "Bash(do sed -i 's/using Marventa.Framework.Infrastructure.Caching/using Marventa.Framework.Core.Interfaces/g' \"$file\")",
      "Bash(do sed -i 's/using Marventa.Framework.Infrastructure.Locking/using Marventa.Framework.Core.Interfaces/g' \"$file\")",
      "Bash(do sed -i 's/using Marventa.Framework.Application.Exceptions/using Marventa.Framework.Web.Exceptions/g' \"$file\")",
      "Bash(git config:*)",
      "WebFetch(domain:docs.github.com)",
      "Bash(git shortlog:*)",
      "Bash(git update-ref:*)",
      "Bash(git for-each-ref:*)",
      "Bash(xargs:*)",
      "Bash(git reflog:*)",
      "Bash(git gc:*)",
      "Bash(dotnet build)",
      "Bash(find:*)",
      "Bash(dotnet format:*)",
      "Bash(dotnet build:*)",
      "Bash(dotnet clean:*)",
      "Bash(dotnet restore:*)",
      "Bash(dotnet nuget locals:*)",
      "Bash(git show:*)",
      "Bash(git stash:*)",
      "Bash(dotnet list package:*)"
    ],
    "deny": [],
    "ask": []
  }
}